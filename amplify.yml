version: 1

env:
  variables:
    NPM_CONFIG_ENGINE_STRICT: "false"

backend:
  phases:
    preBuild:
      commands:
        - set -e
        - export NVM_DIR="$HOME/.nvm"
        - '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"'
        - nvm install 20.19.0
        - nvm use 20.19.0
        - node -v && npm -v
    build:
      commands:
        - set -e
        - rm -f package-lock.json
        - npm install --no-audit --no-fund --include=dev
        # (optional) show local binaries so we can see ampx is present
        - ls -la node_modules/.bin | sed -n '1,120p'
        - npx ampx --version
        - echo "BACKEND: APP_ID=$AWS_APP_ID BRANCH=$AWS_BRANCH"
        - npx ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID --verbose

frontend:
  phases:
    preBuild:
      commands:
        - set -e
        - export NVM_DIR="$HOME/.nvm"
        - '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"'
        - nvm install 20.19.0
        - nvm use 20.19.0
        - node -v && npm -v
        - rm -f package-lock.json
        - npm install --no-audit --no-fund --include=dev
        - ls -la node_modules/.bin | sed -n '1,120p'
        - echo "FRONTEND: APP_ID=$AWS_APP_ID BRANCH=$AWS_BRANCH"
        - npx ampx generate outputs --branch $AWS_BRANCH --app-id $AWS_APP_ID
        - test -f amplify_outputs.json || (echo "amplify_outputs.json not found" && exit 1)
        - mkdir -p public
        - cp amplify_outputs.json public/amplify_outputs.json
    build:
      commands:
        - set -e
        - npm run build --logLevel info
  artifacts:
    baseDirectory: dist
    files:
      - '**/*'
  cache:
    paths:
      - .npm/**/*
